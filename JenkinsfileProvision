/* ## **MONGO ATLAS**

## Organizations

The orgs resource provides access to manage Atlas organizations.
Base URL: https://cloud.mongodb.com/api/atlas/v1.0/orgs/{ORG-ID}

## Projects

Projects in the organizations will have your clusters and databases. Groups and projects are synonymous terms.
Base URL: https://cloud.mongodb.com/api/atlas/v1.0/groups

## Clusters

MongoDB Atlas Cluster is a NoSQL Database-as-a-Service offering in the public cloud (available in Microsoft Azure, Google Cloud Platform, Amazon Web Services).A MongoDB cluster allows a MongoDB database to either horizontally scale across many servers with sharding, or to replicate data ensuring high availability with MongoDB replica sets, therefore enhancing the overall performance and reliability of the MongoDB cluster.
A database cluster is a collection of databases that is managed by a single instance of a running database server.
Base URL: https://cloud.mongodb.com/api/atlas/v1.0/groups/{GROUP-ID}/clusters

*/

pipeline {
    agent any
    options {
        ansiColor('xterm')
    }
    parameters {
        separator(name: 'MongoDB Atlas Parameters', sectionHeader: 'MongoDB Atlas Parameters')
        password(name: 'atlas_public_key', defaultValue: '', description: 'MongoDB Atlas public key(typically 8 characters in length) for provisioning. Refer - https://github.ibm.com/WatsonOrchestrate/wo-mongodb-atlas-automation/blob/main/README.md')
        password(name: 'atlas_private_key', defaultValue: '', description: 'MongoDB Atlas private key(typically 36 characters in length) for provisioning.')
        // choice(name: 'atlas_region', choices: ['US_EAST_1', 'US_WEST_2', 'CA_CENTRAL_1', 'US_EAST_2', 'US_WEST_1', 'SA_EAST_1', 'AP_SOUTHEAST_1', 'AP_SOUTHEAST_2', 'AP_SOUTHEAST_3', 'AP_SOUTH_1', 'AP_EAST_1', 'AP_NORTHEAST_1', 'AP_NORTHEAST_2', 'AP_NORTHEAST_3', 'EU_WEST_1', 'EU_CENTRAL_1', 'EU_NORTH_1', 'EU_WEST_2', 'EU_WEST_3', 'EU_SOUTH_1', 'ME_SOUTH_1', 'AF_SOUTH_1'], description: 'Select Project')
        choice(name: 'region', choices: ['us-east-1', 'us-west-2', 'ca-central-1', 'us-east-2', 'us-west-1', 'sa-east-1', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-south-1', 'ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'eu-west-1', 'eu-central-1', 'eu-north-1', 'eu-west-2', 'eu-west-3', 'eu-south-1', 'me-south-1', 'af-south-1'], description: 'Select Region')
        choice(name: 'atlas_project', choices: ['wo-sre-dev-cluster(625e8f54c6f9c330400eb8c9)', 'wo-sre-pre-prod(6294afcd616aad482736ec3d)', 'wo-sre-prod(6294ae49a574e03a2abfb428)', 'wo-sre-stg-cluster(6273639f0dbf34569a3c0b2a)'], description: 'Select Project from the list.Respective Project ID mentioned in parenthesis for reference')
        // string(name: 'atlas_cluster_name', defaultValue: '', description: 'Atlas cluster name in format: wo-<env>-<instance>-mongodb Ex. wo-dev-lcap-mongodb')
        // validatingString(name: 'atlas_cluster_name', defaultValue: '', regex: '^wo?-.+?-.+?-mongodb', failedValidationMessage: 'Validation failed! : Enter cluster name in format: wo-<env>-<instance>-mongodb', description: 'Atlas cluster name in format: wo-<env>-<instance>-mongodb Ex. wo-dev-lcap-mongodb')
        validatingString(name: 'atlas_instance_name', defaultValue: '', regex: '^.+?-.+?-.+', failedValidationMessage: 'Validation failed! : Enter instance name in format: wo-<env>-<instance>', description: 'Atlas instance name in format: wo-<env>-<instance> Ex. wo-dev-lcap. This will create mongo cluster with name wo-<env>-<instance>-mongodb in approx. 10 minutes. A database user will be created with name <instance>-mongodb.')
        separator(name: 'VPC Peering Related Parameters', sectionHeader: 'VPC Peering Related Parameters (not needed for dev environmet)')
        // string(name: 'aws_region', defaultValue: 'ap-south-1', description: 'AWS Region in which cluster needs to be deployed.')
        // string(name: 'atlas_vpc_cidr', defaultValue: '', description: 'Atlas VPC CIDR block')
        string(name: 'aws_act_id', defaultValue: '', description: 'AWS account in which service needs to be deployed.')
        string(name: 'aws_vpc_id', defaultValue: '', description: 'AWS VPC ID for peering Ex. vpc-xxxxxxxxxxx')
        string(name: 'aws_vpc_cidr', defaultValue: '', description: 'AWS VPC IPv4 CIDR block in format: x.x.x.x/x Ex. 10.0.0.0/16. IPv4 CIDR block of VPC must not overlap')
    //string(name: 'subnet_a_cidr', defaultValue: '', description: 'AWS VPC subnet a CIDR block')
    //string(name: 'subnet_b_cidr', defaultValue: '', description: 'AWS VPC subnet b CIDR block')
    }
    environment {
        BRANCH_NAME_ENV = 'mongo-atlas-provisioning'
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_SESSION_TOKEN = credentials('AWS_SESSION_TOKEN')
        //AWS_DEFAULT_REGION = "${sh(returnStdout: true, script: 'echo "$atlas_region" | tr "[:upper:]" "[:lower:]" | sed "s/_/-/g" | tr -d "\n"')}"
        AWS_DEFAULT_REGION = "${region}"
        atlas_region = "${sh(returnStdout: true, script: '''#!/bin/bash
                                                  echo "$region" | tr "[:lower:]" "[:upper:]" | sed "s/-/_/g" | tr -d "\n"
                                                  ''').trim()}"
        atlas_cluster_name = "${sh(returnStdout: true, script: '''#!/bin/bash
                                                        echo "$atlas_instance_name-mongodb" | tr -d "\n"
                                                        ''').trim()}"
        atlas_dbuser = "${sh(returnStdout: true, script: "echo $atlas_cluster_name | cut -f 3- -d '-' | tr -d '\n'")}"
        atlas_dbpassword = "${sh(returnStdout: true, script: "aws secretsmanager get-random-password --require-each-included-type --password-length 13 --exclude-punctuation --output text --region $AWS_DEFAULT_REGION | tr -d '\n'")}"
        ATLAS_PROJECT_NAME = "${sh(returnStdout: true, script: '''#!/bin/bash
                                                        echo "$atlas_project"|cut -f 1 -d "(" | tr -d "\n"
                                                        ''').trim()}"
        ATLAS_PROJECT_ID = "${sh(returnStdout: true, script: '''#!/bin/bash
                                                      echo "$atlas_project"|cut -f 2 -d "("|cut -f 1 -d ")" | tr -d "\n"
                                                      ''').trim()}"
    // TF_LOG="TRACE"
    }
    stages {
        // stage('checkout') {
            // steps {
                // git branch: "${BRANCH_NAME_ENV}", credentialsId: 'git-cred-for-MongoDB', url: 'https://github.ibm.com/WatsonOrchestrate/wo-mongodb-atlas-automation.git'
            }
        // }
        stage('Variable Processing') {
            steps {
                script {
                    def res = 0
                    res = sh(script: '''#!/bin/bash
                    # Convert Selected Atlas region to lowercase to set aws region & export
                    # export AWS_DEFAULT_REGION="$(echo "$atlas_region" | tr '[:upper:]' '[:lower:]' | sed "s/_/-/g")"
                    # Split atlas_project into ATLAS_PROJECT_NAME and ATLAS_PROJECT_ID
                    # export ATLAS_PROJECT_NAME="$(echo "$atlas_project"|cut -f 1 -d "(")"
                    # export ATLAS_PROJECT_ID="$(echo "$atlas_project"|cut -f 2 -d "("|cut -f 1 -d ")")"
                    # export atlas_dbuser="$(echo "$instance_name-mongodb")"
                    if [ $(echo "$atlas_public_key" | awk '{print length}') != 8 ]; then
                        echo "\033[31mProvided Atlas Public Key is Invalid\033[0m"
                        exit 1

                    fi
                    if [ $(echo "$atlas_private_key" | awk '{print length}') != 36 ]; then
                        echo "\033[31mProvided Atlas private Key is Invalid\033[0m"
                        exit 1
                    fi
                    if [ -z $(echo "$atlas_instance_name" | grep -E '^.+?-.+?-.+') ]; then
                        echo "\033[31mInvalid Instance Name Format : Enter Instance Name in format: wo-<env>-<instance>\033[0m"
                        exit 1
                    fi
                    if [ ! -z "$aws_vpc_id" ]; then
                        if [ -z "$(echo "$aws_act_id" | grep -E '^[[:digit:]]{1,}$')" ]; then
                             echo "\033[31mInvalid AWS Account id\033[0m"
                             exit 1
                        elif [ $(echo "$aws_act_id" | awk '{print length}') != 12 ]; then
                               echo "\033[31mInvalid AWS Account id\033[0m"
                               exit 1
                        fi
                        if [ -z $(echo "$aws_vpc_id" | grep -E '^vpc.?-.+') ]; then
                            echo "\033[31mInvalid VPC Id\033[0m"
                            exit 1
                        fi
                        if [ -z "$(echo "$aws_vpc_cidr" | grep -E '([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\/[0-9]{1,3}')" ]; then
                            echo "\033[31mInvalid AWS VPC cidr\033[0m"
                            exit 1
                        else
                         if [ $(echo "$aws_vpc_cidr" | cut -f 2- -d '/') -gt 28 ]; then
                             echo "\033[31mInvalid AWS VPC cidr\033[0m"
                             exit 1

                         elif [ $(echo "$aws_vpc_cidr" | cut -f 2- -d '/') -lt 16 ]; then
                               echo "\033[31mInvalid AWS VPC cidr\033[0m"
                               exit 1
                         fi
                       fi
                    fi
                    echo "atlas_region=$atlas_region"
                    echo "AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION"
                    echo "ATLAS_PROJECT_NAME=$ATLAS_PROJECT_NAME"
                    echo "ATLAS_PROJECT_ID=$ATLAS_PROJECT_ID"
                    echo "atlas_cluster_name=$atlas_cluster_name"
                    '''
                    , returnStatus:true)
                    if (res != 0) {
                        currentBuild.result = 'ABORTED'
                        error('Invalid format of parameter')
                    }
                }
            }
        }
        stage('Validate cluster name') {
            steps {
                script {
                    def res = 0
                    res = sh(script: '''#!/bin/bash
                        # export ATLAS_PROJECT_ID="$(echo "$atlas_project"|cut -f 2 -d "("|cut -f 1 -d ")")"
                        clusters_json="$(curl --silent --user "${atlas_public_key}:${atlas_private_key}" --digest -X GET "https://cloud.mongodb.com/api/atlas/v1.0/groups/${ATLAS_PROJECT_ID}/clusters" | jq ".results[].name")"
                        echo "clusters_json=$clusters_json"
                        if [ ! -z "$clusters_json" ]; then
                            if echo "$clusters_json" | grep -E "${atlas_cluster_name}" 1>/dev/null 2>&1; then
                                echo "$\033[31matlas_cluster_name already exists!\033[0m"
                                exit 1
                            else
                                echo "$atlas_cluster_name does not exist!"
                                exit 0
                            fi
                        else
                            echo "no cluster exist"
                            exit 0
                        fi
                    '''
                    , returnStatus:true)
                    if (res != 0) {
                        currentBuild.result = 'ABORTED'
                        error('Provided cluster name already exist')
                    }
                }
            }
        }
        stage('Terraform init') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh '''#!/bin/bash
                    rm -rf .terraform .terraform.lock.hcl terraform.tfstate.d
                    # Split atlas_project into ATLAS_PROJECT_NAME and ATLAS_PROJECT_ID
                    # export ATLAS_PROJECT_NAME="$(echo "$atlas_project"|cut -f 1 -d "(")"
                    # export ATLAS_PROJECT_ID="$(echo "$atlas_project"|cut -f 2 -d "("|cut -f 1 -d ")")"
                    terraform init -backend-config="key=${ATLAS_PROJECT_NAME}/${atlas_cluster_name}/terraform.tfstate"
                   '''
                }
            }
        }
        stage('Terraform Plan') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[password: atlas_dbpassword]]]) {
                        sh '''#!/bin/bash
                    echo "State File Location: mongo-atlas-provisioning-automation-state-bucket > ${ATLAS_PROJECT_NAME}/${atlas_cluster_name}/terraform.tfstate"
                    # Split atlas_project into ATLAS_PROJECT_NAME and ATLAS_PROJECT_ID
                    # export ATLAS_PROJECT_NAME="$(echo "$atlas_project"|cut -f 1 -d "(")"
                    # export ATLAS_PROJECT_ID="$(echo "$atlas_project"|cut -f 2 -d "("|cut -f 1 -d ")")"
                    # export atlas_dbuser="$(echo "$instance_name-mongodb")"
                    # Convert Selected Atlas region to lowercase to set aws region & export
                    # export AWS_DEFAULT_REGION="$(echo "$atlas_region" | tr '[:upper:]' '[:lower:]' | sed "s/_/-/g")"
                    echo "terraform plan"
                    terraform plan \
                      -var public_key=${atlas_public_key} \
                      -var private_key=${atlas_private_key} \
                      -var atlas_region=${atlas_region} \
                      -var project_name=${ATLAS_PROJECT_NAME} \
                      -var project_id=${ATLAS_PROJECT_ID} \
                      -var cluster_name=${atlas_cluster_name} \
                      -var access_key=${AWS_ACCESS_KEY_ID} \
                      -var secret_key=${AWS_SECRET_ACCESS_KEY} \
                      -var aws_region=${AWS_DEFAULT_REGION} \
                      -var aws_token=${AWS_SESSION_TOKEN} \
                      -var aws_account_id=${aws_act_id} \
                      -var aws_cidr=${aws_vpc_cidr} \
                      -var aws_vpc_id=${aws_vpc_id} \
                      -var atlas_dbpassword=${atlas_dbpassword} \
                      -var atlas_dbuser=${atlas_dbuser} \
                      -out my.plan
                   '''
                    }
                }
            }
        }
        stage('Terraform Apply') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh '''#!/bin/bash
                     # export ATLAS_PROJECT_ID="$(echo "$atlas_project"|cut -f 2 -d "("|cut -f 1 -d ")")"
                     # export atlas_dbuser="$(echo "$instance_name-mongodb")"
                     echo "terraform Apply"
                     terraform apply -no-color "my.plan"
                     # pwd
                      chmod +x create-mongo-secret.sh
                      ./create-mongo-secret.sh
                      RC=$?
                      if [ $RC != 0 ]; then
                        exit $RC
                      fi
                   '''
                }
            }
        }
    }
}
